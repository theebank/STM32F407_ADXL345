
UARTDrivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000468  08000470  00010470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000468  08000468  00010470  2**0
                  CONTENTS
  4 .ARM          00000000  08000468  08000468  00010470  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000468  08000470  00010470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010470  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000104a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000777  00000000  00000000  000104e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000028a  00000000  00000000  00010c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000a8  00000000  00000000  00010ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000072  00000000  00000000  00010f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018f46  00000000  00000000  00011002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000e9d  00000000  00000000  00029f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008bc8f  00000000  00000000  0002ade5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000198  00000000  00000000  000b6a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  000b6c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000450 	.word	0x08000450

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000450 	.word	0x08000450

080001e8 <main>:
	GPIOD->BSRR |= (1U<<31);
}

char key;

int main(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= GPIOAEN;
 80001ec:	4b2a      	ldr	r3, [pc, #168]	; (8000298 <main+0xb0>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a29      	ldr	r2, [pc, #164]	; (8000298 <main+0xb0>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= GPIODEN;
 80001f8:	4b27      	ldr	r3, [pc, #156]	; (8000298 <main+0xb0>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fc:	4a26      	ldr	r2, [pc, #152]	; (8000298 <main+0xb0>)
 80001fe:	f043 0308 	orr.w	r3, r3, #8
 8000202:	6313      	str	r3, [r2, #48]	; 0x30


	GPIOD->MODER |= (0x1UL<<24U);
 8000204:	4b25      	ldr	r3, [pc, #148]	; (800029c <main+0xb4>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a24      	ldr	r2, [pc, #144]	; (800029c <main+0xb4>)
 800020a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800020e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<25);
 8000210:	4b22      	ldr	r3, [pc, #136]	; (800029c <main+0xb4>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a21      	ldr	r2, [pc, #132]	; (800029c <main+0xb4>)
 8000216:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800021a:	6013      	str	r3, [r2, #0]

	GPIOD->MODER |= (0x1UL<<26U);
 800021c:	4b1f      	ldr	r3, [pc, #124]	; (800029c <main+0xb4>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a1e      	ldr	r2, [pc, #120]	; (800029c <main+0xb4>)
 8000222:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000226:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<27);
 8000228:	4b1c      	ldr	r3, [pc, #112]	; (800029c <main+0xb4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1b      	ldr	r2, [pc, #108]	; (800029c <main+0xb4>)
 800022e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000232:	6013      	str	r3, [r2, #0]

	GPIOD->MODER |= (0x1UL<<28U);
 8000234:	4b19      	ldr	r3, [pc, #100]	; (800029c <main+0xb4>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a18      	ldr	r2, [pc, #96]	; (800029c <main+0xb4>)
 800023a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800023e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<29);
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <main+0xb4>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a15      	ldr	r2, [pc, #84]	; (800029c <main+0xb4>)
 8000246:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800024a:	6013      	str	r3, [r2, #0]

	GPIOD->MODER |= (0x1UL<<30U);
 800024c:	4b13      	ldr	r3, [pc, #76]	; (800029c <main+0xb4>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a12      	ldr	r2, [pc, #72]	; (800029c <main+0xb4>)
 8000252:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000256:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<31);
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <main+0xb4>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0f      	ldr	r2, [pc, #60]	; (800029c <main+0xb4>)
 800025e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000262:	6013      	str	r3, [r2, #0]

	uart2_tx_init();
 8000264:	f000 f858 	bl	8000318 <uart2_tx_init>

	while(1){
		key = uart2_read();
 8000268:	f000 f842 	bl	80002f0 <uart2_read>
 800026c:	4603      	mov	r3, r0
 800026e:	461a      	mov	r2, r3
 8000270:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <main+0xb8>)
 8000272:	701a      	strb	r2, [r3, #0]
		if(key=='1'){
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <main+0xb8>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b31      	cmp	r3, #49	; 0x31
 800027a:	d106      	bne.n	800028a <main+0xa2>
			GPIOD->ODR &=~LED_GREEN;
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <main+0xb4>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a06      	ldr	r2, [pc, #24]	; (800029c <main+0xb4>)
 8000282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000286:	6153      	str	r3, [r2, #20]
 8000288:	e7ee      	b.n	8000268 <main+0x80>
		}else{
			GPIOD->ODR |= LED_GREEN;
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <main+0xb4>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	4a03      	ldr	r2, [pc, #12]	; (800029c <main+0xb4>)
 8000290:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000294:	6153      	str	r3, [r2, #20]
		key = uart2_read();
 8000296:	e7e7      	b.n	8000268 <main+0x80>
 8000298:	40023800 	.word	0x40023800
 800029c:	40020c00 	.word	0x40020c00
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <compute_uart_div>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
void uart2_tx_init();
void uart2_write(int ch);
int __io_putchar(int ch);

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (BaudRate/2U))/BaudRate;
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	085a      	lsrs	r2, r3, #1
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	441a      	add	r2, r3
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002bc:	b29b      	uxth	r3, r3
}
 80002be:	4618      	mov	r0, r3
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr

080002ca <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b084      	sub	sp, #16
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	60f8      	str	r0, [r7, #12]
 80002d2:	60b9      	str	r1, [r7, #8]
 80002d4:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk,BaudRate);
 80002d6:	6879      	ldr	r1, [r7, #4]
 80002d8:	68b8      	ldr	r0, [r7, #8]
 80002da:	f7ff ffe3 	bl	80002a4 <compute_uart_div>
 80002de:	4603      	mov	r3, r0
 80002e0:	461a      	mov	r2, r3
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	609a      	str	r2, [r3, #8]
}
 80002e6:	bf00      	nop
 80002e8:	3710      	adds	r7, #16
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <uart2_read>:

	//enable uart module
	USART2->CR1 |= CR1_EN;
}

char uart2_read(){
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	//make sure receive data reg is not empty
	while(!(USART2->SR & SR_RXNE)){}
 80002f4:	bf00      	nop
 80002f6:	4b07      	ldr	r3, [pc, #28]	; (8000314 <uart2_read+0x24>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f003 0320 	and.w	r3, r3, #32
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d0f9      	beq.n	80002f6 <uart2_read+0x6>
//	return data
	return USART2->DR;
 8000302:	4b04      	ldr	r3, [pc, #16]	; (8000314 <uart2_read+0x24>)
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	b2db      	uxtb	r3, r3
}
 8000308:	4618      	mov	r0, r3
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40004400 	.word	0x40004400

08000318 <uart2_tx_init>:

void uart2_tx_init(){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	//configure uart gpio pin
//	enable clock access to gpioa
	RCC->AHB1ENR |= GPIOAEN;
 800031c:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <uart2_tx_init+0x8c>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000320:	4a20      	ldr	r2, [pc, #128]	; (80003a4 <uart2_tx_init+0x8c>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6313      	str	r3, [r2, #48]	; 0x30
//	set pa2 mode to alternate func mode
	GPIOA->MODER &=~(1U<<4);
 8000328:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <uart2_tx_init+0x90>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a1e      	ldr	r2, [pc, #120]	; (80003a8 <uart2_tx_init+0x90>)
 800032e:	f023 0310 	bic.w	r3, r3, #16
 8000332:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000334:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <uart2_tx_init+0x90>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a1b      	ldr	r2, [pc, #108]	; (80003a8 <uart2_tx_init+0x90>)
 800033a:	f043 0320 	orr.w	r3, r3, #32
 800033e:	6013      	str	r3, [r2, #0]
//	set pa2 alternate func type to uart tx af07
	GPIOA->AFR[0] |= (1U<<8);
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <uart2_tx_init+0x90>)
 8000342:	6a1b      	ldr	r3, [r3, #32]
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <uart2_tx_init+0x90>)
 8000346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800034a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 800034c:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <uart2_tx_init+0x90>)
 800034e:	6a1b      	ldr	r3, [r3, #32]
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <uart2_tx_init+0x90>)
 8000352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000356:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000358:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <uart2_tx_init+0x90>)
 800035a:	6a1b      	ldr	r3, [r3, #32]
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <uart2_tx_init+0x90>)
 800035e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000362:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (1U<<11);
 8000364:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <uart2_tx_init+0x90>)
 8000366:	6a1b      	ldr	r3, [r3, #32]
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <uart2_tx_init+0x90>)
 800036a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800036e:	6213      	str	r3, [r2, #32]

//	confugre uart module
//	enable clcock access to uart2
	RCC->APB1ENR |= USART2EN;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <uart2_tx_init+0x8c>)
 8000372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000374:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <uart2_tx_init+0x8c>)
 8000376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800037a:	6413      	str	r3, [r2, #64]	; 0x40
//	configure uart baudrate
	uart_set_baudrate(USART2,APB1_CLK, UART_BR);
 800037c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000380:	490a      	ldr	r1, [pc, #40]	; (80003ac <uart2_tx_init+0x94>)
 8000382:	480b      	ldr	r0, [pc, #44]	; (80003b0 <uart2_tx_init+0x98>)
 8000384:	f7ff ffa1 	bl	80002ca <uart_set_baudrate>
//	configure transfer direction
	USART2->CR1 |= CR1_TE;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <uart2_tx_init+0x98>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <uart2_tx_init+0x98>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	60d3      	str	r3, [r2, #12]

	//enable uart module
	USART2->CR1 |= CR1_EN;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <uart2_tx_init+0x98>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <uart2_tx_init+0x98>)
 800039a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800039e:	60d3      	str	r3, [r2, #12]
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40020000 	.word	0x40020000
 80003ac:	00f42400 	.word	0x00f42400
 80003b0:	40004400 	.word	0x40004400

080003b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003bc:	480c      	ldr	r0, [pc, #48]	; (80003f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003be:	490d      	ldr	r1, [pc, #52]	; (80003f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c0:	4a0d      	ldr	r2, [pc, #52]	; (80003f8 <LoopForever+0xe>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c4:	e002      	b.n	80003cc <LoopCopyDataInit>

080003c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ca:	3304      	adds	r3, #4

080003cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d0:	d3f9      	bcc.n	80003c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d2:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d4:	4c0a      	ldr	r4, [pc, #40]	; (8000400 <LoopForever+0x16>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d8:	e001      	b.n	80003de <LoopFillZerobss>

080003da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003dc:	3204      	adds	r2, #4

080003de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e0:	d3fb      	bcc.n	80003da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e2:	f000 f811 	bl	8000408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e6:	f7ff feff 	bl	80001e8 <main>

080003ea <LoopForever>:

LoopForever:
  b LoopForever
 80003ea:	e7fe      	b.n	80003ea <LoopForever>
  ldr   r0, =_estack
 80003ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f8:	08000470 	.word	0x08000470
  ldr r2, =_sbss
 80003fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000400:	20000020 	.word	0x20000020

08000404 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC_IRQHandler>
	...

08000408 <__libc_init_array>:
 8000408:	b570      	push	{r4, r5, r6, lr}
 800040a:	4d0d      	ldr	r5, [pc, #52]	; (8000440 <__libc_init_array+0x38>)
 800040c:	4c0d      	ldr	r4, [pc, #52]	; (8000444 <__libc_init_array+0x3c>)
 800040e:	1b64      	subs	r4, r4, r5
 8000410:	10a4      	asrs	r4, r4, #2
 8000412:	2600      	movs	r6, #0
 8000414:	42a6      	cmp	r6, r4
 8000416:	d109      	bne.n	800042c <__libc_init_array+0x24>
 8000418:	4d0b      	ldr	r5, [pc, #44]	; (8000448 <__libc_init_array+0x40>)
 800041a:	4c0c      	ldr	r4, [pc, #48]	; (800044c <__libc_init_array+0x44>)
 800041c:	f000 f818 	bl	8000450 <_init>
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	10a4      	asrs	r4, r4, #2
 8000424:	2600      	movs	r6, #0
 8000426:	42a6      	cmp	r6, r4
 8000428:	d105      	bne.n	8000436 <__libc_init_array+0x2e>
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000430:	4798      	blx	r3
 8000432:	3601      	adds	r6, #1
 8000434:	e7ee      	b.n	8000414 <__libc_init_array+0xc>
 8000436:	f855 3b04 	ldr.w	r3, [r5], #4
 800043a:	4798      	blx	r3
 800043c:	3601      	adds	r6, #1
 800043e:	e7f2      	b.n	8000426 <__libc_init_array+0x1e>
 8000440:	08000468 	.word	0x08000468
 8000444:	08000468 	.word	0x08000468
 8000448:	08000468 	.word	0x08000468
 800044c:	0800046c 	.word	0x0800046c

08000450 <_init>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr

0800045c <_fini>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr
